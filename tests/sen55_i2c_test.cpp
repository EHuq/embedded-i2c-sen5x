/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.2.0
 * Yaml Version: 0.5.1
 * Template Version: 0.7.0-8-gbdfd7a4
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "i2c_mux.h"
#include "sen55_i2c.h"
#include "sensirion_common.h"
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"
#include "sensirion_test_setup.h"
#include <inttypes.h>
#include <stdio.h>

// TODO: DRIVER_GENERATOR Remove commands which shouldn't be tested
// TODO: DRIVER_GENERATOR Adjust setup and teardown
// TODO: DRIVER_GENERATOR Adjust all tests such that pre- and post conditions
// are meet

TEST_GROUP (SEN55_Tests) {
    void setup() {
        sensirion_i2c_hal_init();

        // Select MUX 1 channel 1 (TODO: DRIVER_GENERATOR choose correct mux
        // position)
        int16_t error = sensirion_i2c_mux_set_single_channel(0x71, 1);
        CHECK_EQUAL_ZERO_TEXT(error, "sensirion_i2c_mux_set_single_channel")
    }

    void teardown() {

        int16_t error;
        error = sen55_device_reset();
        CHECK_EQUAL_ZERO_TEXT(error, "sen55_device_reset");

        sensirion_i2c_hal_free();
    }
};

TEST (SEN55_Tests, SEN55_Test_start_measurement) {
    int16_t error;
    error = sen55_start_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_start_measurement");
}

TEST (SEN55_Tests, SEN55_Test_stop_measurement) {
    int16_t error;
    error = sen55_stop_measurement();
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_stop_measurement");
}

TEST (SEN55_Tests, SEN55_Test_read_data_ready) {
    int16_t error;
    bool data_ready;
    error = sen55_read_data_ready(&data_ready);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_read_data_ready");
    printf("Data ready: %i\n", data_ready);
}

TEST (SEN55_Tests, SEN55_Test_read_measured_pm_values_float) {
    int16_t error;
    float mass_concentration_pm1p0;
    float mass_concentration_pm2p5;
    float mass_concentration_pm4p0;
    float mass_concentration_pm10p0;
    float number_concentration_pm0p5;
    float number_concentration_pm1p0;
    float number_concentration_pm2p5;
    float number_concentration_pm4p0;
    float number_concentration_pm10p0;
    float typical_particle_size;
    error = sen55_read_measured_pm_values_float(
        &mass_concentration_pm1p0, &mass_concentration_pm2p5,
        &mass_concentration_pm4p0, &mass_concentration_pm10p0,
        &number_concentration_pm0p5, &number_concentration_pm1p0,
        &number_concentration_pm2p5, &number_concentration_pm4p0,
        &number_concentration_pm10p0, &typical_particle_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_read_measured_pm_values_float");
    printf("Mass concentration pm1p0: %f\n", mass_concentration_pm1p0);
    printf("Mass concentration pm2p5: %f\n", mass_concentration_pm2p5);
    printf("Mass concentration pm4p0: %f\n", mass_concentration_pm4p0);
    printf("Mass concentration pm10p0: %f\n", mass_concentration_pm10p0);
    printf("Number concentration pm0p5: %f\n", number_concentration_pm0p5);
    printf("Number concentration pm1p0: %f\n", number_concentration_pm1p0);
    printf("Number concentration pm2p5: %f\n", number_concentration_pm2p5);
    printf("Number concentration pm4p0: %f\n", number_concentration_pm4p0);
    printf("Number concentration pm10p0: %f\n", number_concentration_pm10p0);
    printf("Typical particle size: %f\n", typical_particle_size);
}

TEST (SEN55_Tests, SEN55_Test_read_measured_values) {
    int16_t error;
    uint16_t mass_concentration_pm1p0;
    uint16_t mass_concentration_pm2p5;
    uint16_t mass_concentration_pm4p0;
    uint16_t mass_concentration_pm10p0;
    int16_t ambient_humidity;
    int16_t ambient_temperature;
    int16_t voc_index;
    int16_t nox_index;
    error = sen55_read_measured_values(
        &mass_concentration_pm1p0, &mass_concentration_pm2p5,
        &mass_concentration_pm4p0, &mass_concentration_pm10p0,
        &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_read_measured_values");
    printf("Mass concentration pm1p0: %u\n", mass_concentration_pm1p0);
    printf("Mass concentration pm2p5: %u\n", mass_concentration_pm2p5);
    printf("Mass concentration pm4p0: %u\n", mass_concentration_pm4p0);
    printf("Mass concentration pm10p0: %u\n", mass_concentration_pm10p0);
    printf("Ambient humidity: %i\n", ambient_humidity);
    printf("Ambient temperature: %i\n", ambient_temperature);
    printf("Voc index: %i\n", voc_index);
    printf("Nox index: %i\n", nox_index);
}

TEST (SEN55_Tests, SEN55_Test_read_measured_raw_values) {
    int16_t error;
    int16_t raw_humidity;
    int16_t raw_temperature;
    uint16_t raw_voc;
    uint16_t raw_nox;
    error = sen55_read_measured_raw_values(&raw_humidity, &raw_temperature,
                                           &raw_voc, &raw_nox);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_read_measured_raw_values");
    printf("Raw humidity: %i\n", raw_humidity);
    printf("Raw temperature: %i\n", raw_temperature);
    printf("Raw voc: %u\n", raw_voc);
    printf("Raw nox: %u\n", raw_nox);
}

TEST (SEN55_Tests, SEN55_Test_start_fan_cleaning) {
    int16_t error;
    error = sen55_start_fan_cleaning();
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_start_fan_cleaning");
}

TEST (SEN55_Tests, SEN55_Test_set_fan_auto_cleaning_interval) {
    int16_t error;
    uint32_t interval = 0;
    error = sen55_set_fan_auto_cleaning_interval(interval);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_set_fan_auto_cleaning_interval");
}

TEST (SEN55_Tests, SEN55_Test_get_fan_auto_cleaning_interval) {
    int16_t error;
    uint32_t interval;
    error = sen55_get_fan_auto_cleaning_interval(&interval);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_get_fan_auto_cleaning_interval");
    printf("Interval: %u\n", interval);
}

TEST (SEN55_Tests, SEN55_Test_get_product_name) {
    int16_t error;
    unsigned char product_name[42];
    uint8_t product_name_size = 42;
    error = sen55_get_product_name(&product_name[0], product_name_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_get_product_name");
    printf("Product name: %s\n", product_name);
}

TEST (SEN55_Tests, SEN55_Test_get_serial_number) {
    int16_t error;
    unsigned char serial_number[42];
    uint8_t serial_number_size = 42;
    error = sen55_get_serial_number(&serial_number[0], serial_number_size);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_get_serial_number");
    printf("Serial number: %s\n", serial_number);
}

TEST (SEN55_Tests, SEN55_Test_get_version) {
    int16_t error;
    uint8_t firmware_major;
    uint8_t firmware_minor;
    bool firmware_debug;
    uint8_t hardware_major;
    uint8_t hardware_minor;
    uint8_t protocol_major;
    uint8_t protocol_minor;
    error = sen55_get_version(&firmware_major, &firmware_minor, &firmware_debug,
                              &hardware_major, &hardware_minor, &protocol_major,
                              &protocol_minor);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_get_version");
    printf("Firmware major: %u\n", firmware_major);
    printf("Firmware minor: %u\n", firmware_minor);
    printf("Firmware debug: %i\n", firmware_debug);
    printf("Hardware major: %u\n", hardware_major);
    printf("Hardware minor: %u\n", hardware_minor);
    printf("Protocol major: %u\n", protocol_major);
    printf("Protocol minor: %u\n", protocol_minor);
}

TEST (SEN55_Tests, SEN55_Test_read_device_status) {
    int16_t error;
    uint32_t device_status;
    error = sen55_read_device_status(&device_status);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_read_device_status");
    printf("Device status: %u\n", device_status);
}

TEST (SEN55_Tests, SEN55_Test_read_and_clear_device_status) {
    int16_t error;
    uint32_t device_status;
    error = sen55_read_and_clear_device_status(&device_status);
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_read_and_clear_device_status");
    printf("Device status: %u\n", device_status);
}

TEST (SEN55_Tests, SEN55_Test_device_reset) {
    int16_t error;
    error = sen55_device_reset();
    CHECK_EQUAL_ZERO_TEXT(error, "sen55_device_reset");
}
